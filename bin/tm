#!/usr/bin/env python

# TODO: --loop option: continuously runs, rings bell every N minutes
# todo: write a version of this in Elm

from datetime import timedelta
from os import path
import subprocess
import time
import sys

STEP = 1
MIN = timedelta(seconds=1)
MAX = timedelta(days=1)

def play_sound():
    home = path.expanduser('~')
    sound_path = path.join(home, 'sounds/hugebell.mp3')
    subprocess.run(['afplay', sound_path])

def timer(duration):
    elapsed = timedelta(seconds=0)
    while elapsed < duration:
        output = str(duration - elapsed)
        sys.stdout.write(output)
        sys.stdout.flush()
        time.sleep(STEP)
        elapsed = elapsed + timedelta(seconds=STEP)
        sys.stdout.write('\b'*len(output))

    play_sound()


def main(argv):
    if len(argv) != 2:
        print('Usage: {prog} [MINUTES]'.format(prog=path.basename(argv[0])))
        sys.exit(1)
    try:
        length = timedelta(minutes=float(argv[1]))
    except (TypeError, ValueError):
        print('{!r} not numeric.'.format(argv[1]))
        sys.exit(1)
    except OverflowError:
        length = timedelta.max
    if not MIN < length < MAX:
        print('Timer out of bounds.  Must be between one second and one day, '
              'i.e. {:.2} < t < {}'
              .format(MIN.total_seconds()/60, int(MAX.total_seconds()//60)))
        sys.exit(1)
    timer(length)


if __name__ == '__main__':
    try:
        main(sys.argv)
    except KeyboardInterrupt:
        sys.exit()
