#!/usr/bin/env python

import re
import sys
from functools import reduce, partial
from email import policy
from email.parser import Parser
from email.header import Header

BRACKETED = re.compile(r'<[^>]+>')
QUOTED = re.compile(r'"([^"]+)"')
SPACES = re.compile(r'\s{2,}')
collapse_spaces = partial(SPACES.sub, ' ')
remove_bracketed = partial(BRACKETED.sub, '')
strip = lambda s: s.strip()

apply = lambda value, func: func(value)

def just_names(email):
    m = QUOTED.findall(email)
    if m:
        return m[0]
    else:
        return reduce(apply, [collapse_spaces, remove_bracketed, strip], email)


def pluralize(word, n):
    if n == 1:
        return word
    else:
        return '{word}s'.format(word=word)


def others(number):
    if number < 1:
        return ''
    return ', and {0} {1}.'.format(number, pluralize('other', number))


def is_too_long(txt):
    wrapped = Header(txt).encode()
    return wrapped.count('\n') > 1


def split_len(n, lst):
    """returns the first elements of a list with total length < n."""
    if not lst or len(lst[0]) > n:
        return []
    else:
        return [lst[0]] + split_len(n - len(lst[0]), lst[1:])


def make_shorter(txt):
    p = list(map(just_names, txt.replace('\n', '').split(',')))
    verbose_p = split_len(110, p)
    return ', '.join(verbose_p) + others(len(p) - len(verbose_p))


p = Parser(policy=policy.default)
msg = p.parse(sys.stdin, headersonly=True)
if msg['To'] and is_too_long(msg['To']):
    msg.replace_header('To', make_shorter(msg['To']))
for cc in ('CC', 'Cc', 'cc'):
    if msg[cc] and is_too_long(msg[cc]):
        msg.replace_header(cc, make_shorter(msg[cc]))
        break

print(msg.as_string())
